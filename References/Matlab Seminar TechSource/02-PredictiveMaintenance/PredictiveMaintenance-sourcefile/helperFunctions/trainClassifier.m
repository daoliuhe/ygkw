function [trainedClassifier, validationAccuracy] = trainClassifier(trainingData)
% trainClassifier(trainingData) 
%  returns a trained classifier and its validation accuracy. 
%  This code recreates the classification model trained in 
%  Classification Learner app. 
%  
%   Input: 
%       trainingData: the training data of same data type as imported 
%        in the app (table or matrix). 
%  
%   Output: 
%       trainedClassifier: a struct containing the trained classifier. 
%        The struct contains various fields with information about the 
%        trained classifier. 
%  
%       trainedClassifier.predictFcn: a function to make predictions 
%        on new data. It takes an input of the same form as this training 
%        code (table or matrix) and returns predictions for the response. 
%        If you supply a matrix, include only the predictors columns (or 
%        rows). 
%  
%       validationAccuracy: a double containing the validation accuracy 
%        score in percent. In the app, the History list displays this 
%        overall accuracy score for each model. 
%  
%  Use the code to train the model with new data. 
%  To retrain your classifier, call the function from the command line 
%  with your original data or new data as the input argument trainingData. 
%  
%  For example, to retrain a classifier trained with the original data set 
%  T, enter: 
%    [trainedClassifier, validationAccuracy] = trainClassifier(T) 
%  
%  To make predictions with the returned 'trainedClassifier' on new data T, 
%  use 
%    yfit = trainedClassifier.predictFcn(T) 
%  
%  To automate training the same classifier with new data, or to learn how 
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 24-Feb-2016 01:50:12


inputTable = trainingData;
% Extract predictors and response 
% This code processes the data into the right shape for training the 
% classifier.
predictorNames = {'LPCOutletTemp', 'HPCOutletTemp', 'LPTOutletTemp', 'TotalHPCOutletPres', 'PhysFanSpeed', 'PhysCoreSpeed', 'StaticHPCOutletPres', 'FuelFlowRatio', 'CorrFanSpeed', 'CorrCoreSpeed', 'BypassRatio', 'BleedEnthalpy', 'HPTCoolantBleed', 'LPTCoolantBleed'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;

% Train a classifier 
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
predictors, ...
response, ...
'Distance', 'Euclidean', ...
'Exponent', [], ...
'NumNeighbors', 1, ...
'DistanceWeight', 'Equal', ...
'Standardize', true, ...
'ClassNames', categorical({'urgent'; 'short'; 'medium'; 'long'}));

trainedClassifier.ClassificationKNN = classificationKNN;
extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(x);
knnPredictFcn = @(x) predict(classificationKNN, x);
trainedClassifier.predictFcn = @(x) knnPredictFcn(predictorExtractionFcn(x));
inputTable = trainingData;
% Extract predictors and response 
% This code processes the data into the right shape for training the 
% classifier.
predictorNames = {'LPCOutletTemp', 'HPCOutletTemp', 'LPTOutletTemp', 'TotalHPCOutletPres', 'PhysFanSpeed', 'PhysCoreSpeed', 'StaticHPCOutletPres', 'FuelFlowRatio', 'CorrFanSpeed', 'CorrCoreSpeed', 'BypassRatio', 'BleedEnthalpy', 'HPTCoolantBleed', 'LPTCoolantBleed'};
predictors = inputTable(:, predictorNames);
response = inputTable.Label;


% Set up holdout validation
cvp = cvpartition(response, 'Holdout', 0.25);
trainingPredictors = predictors(cvp.training,:);
trainingResponse = response(cvp.training,:);

% Train a classifier 
% This code specifies all the classifier options and trains the classifier.
classificationKNN = fitcknn(...
trainingPredictors, ...
trainingResponse, ...
'Distance', 'Euclidean', ...
'Exponent', [], ...
'NumNeighbors', 1, ...
'DistanceWeight', 'Equal', ...
'Standardize', true, ...
'ClassNames', categorical({'urgent'; 'short'; 'medium'; 'long'}));

knnPredictFcn = @(x) predict(classificationKNN, x);
validationPredictFcn = @(x) knnPredictFcn(x);

% Compute validation accuracy
validationPredictors = predictors(cvp.test,:);
validationResponse = response(cvp.test,:);

[validationPredictions, validationScores] = validationPredictFcn(validationPredictors);
correctPredictions = (validationPredictions == validationResponse);
validationAccuracy = sum(correctPredictions)/length(correctPredictions);